#!/bin/bash

set -e

usage() {
	cat << EOF
USAGE:
	note [-c path] [-i course path][-nos] 

PARAMETERS
	-c <path (optional)>
		Compiles all .md files to pdf in the directory of the given path. 
		If a path is not given the .md files in the current directory are compiled.
		
	-i <course name> <path (optional)>
		Initiates a skeleton directory for a new course from the directory given in path. 
		If a path is not given the skeleton directory is created in the current directory.

	-n 
		Creates a new "skeleton" markdown note file. 
	
	-o
		Opens the latest note session in the current directory.
	
	-s 
		Search the given course for a string.	

EOF
}

outputToPDF() {
	local path=$1
	if [ $path="." ]; then
		local course=${PWD##*/}
	else
		local course=${$path##*/}
	fi
	if inNotesDirectory $path; then
		echo "Compiling all sessions to temporary file ..."
		touch $path/.temp.md
		echo -e "--- \n title: $(echo $course | awk '{print toupper($0)}') \n"\
				"author: Erik Jansson \n"\
				"date: $(date +%Y-%m-%d)\n---\n" >> .temp.md
		for file in $path/*.md; do
			echo "\newpage" >> $path/.temp.md
			cat $file >> $path/.temp.md
		done
		echo "Converting temporary file to pdf ..."
		pandoc --latex-engine=xelatex -V mainfont='Helvetica Neue' \
		-V geometry:margin=1.2in --toc -o $path/${course}.pdf $path/.temp.md  
		echo "Deleting temporary file ..."
		rm $path/.temp.md
		echo "Complete"
	fi
}
newCourse() { 
	local course=$1
	local path=$2
	if inNotesDirectory $path; then
		"Warning: Creating nestled notes directory!"
	fi
	if [ $path = "." ]; then
		echo "Creating root directory for course $course in current directory ..."
	else
		echo "Creating root directory for course $course at path: $path ..."
	fi
	mkdir $path/$course/
	echo "Creating subfolders ..."
	mkdir $path/$course/images && mkdir $path/$course/assignments && mkdir $path/$course/misc
	echo "Complete"
}
newSession() { 
	if inNotesDirectory "."; then
		echo "Creating new session ..."
		local newSession=$(($(numberOfSessions)+1))
		touch s$newSession.md
		echo "Preparing new session ..."
		echo -e "# Subject $(date +%Y-%m-%d)" >> s$newSession.md
		echo "Complete"
	else
		echo "Error: Currently not in notes directory"
		echo "Please move to notes directory or initiate one with the -i option"
	fi
}  
numberOfSessions() { 
	local noOfSessions=$(ls -l *.md 2> /dev/null | wc -l) 
	echo $noOfSessions
}
openLastSession() { 
	if [ $(numberOfSessions) -eq 0 ] || ! inNotesDirectory "."; then
		echo "Error: No session available in current directory"
	else
		vim s$(numberOfSessions).md
	fi
}
inNotesDirectory() { 
	local path=$1
	if [ -d $path/images ] && [ -d $path/assignments ] && [ -d $path/misc ]; then
		return 0
	else 
		return 1
	fi
}
search() { 
	if inNotesDirectory "."; then
		if !(ack -i $1 ./*.md); then
			echo "No occurences of the search term found." 
		fi
	else
		echo "Error: Currently not in notes directory."
	fi
}

PARSED_OPTIONS=$(getopt c::hinost $*)
set -- $PARSED_OPTIONS

if [ $# -eq 1 ]; then
	usage
fi
for arg do
	case "$arg" in
		-c)
			shift; shift
			if [ -z $1 ]; then
				outputToPDF "."
			else
				outputToPDF $1
			fi
		;;
		-h)
			usage
		;;
		-i)
			shift; shift
			course=$1
			path=$2
			if [ -z $course ]; then
				echo -e "Error: Course name needed to initiate folder structure.\n"
				usage
				break
			fi
			if [ -z $path ]; then
				newCourse $course "." 
			else
				newCourse $course $path
			fi
		;;
		-n)
			newSession
			shift
		;;
		-o)
			openLastSession
			shift
		;;
		-s)
			shift
			if [ -z $2 ]; then
				echo "Error: Search pattern required."
			else
				search $2
			fi
			shift
		;;
	esac
done
